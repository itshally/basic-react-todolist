{"version":3,"sources":["components/ToDoItem.js","components/Todos.js","components/layout/Header.js","components/AddToDo.js","components/pages/About.js","App.js","index.js"],"names":["ToDoItem","getStyle","background","padding","borderBottom","textDecoration","props","todo","completed","this","id","title","style","type","onChange","markComplete","bind","onClick","deleteTodo","btnStyle","Component","color","border","borderRadius","cursor","float","Todos","todos","map","key","Header","headerStyle","className","to","textAlign","AddToDo","state","onSubmit","e","preventDefault","addToDo","setState","target","name","value","display","placeholder","About","Fragment","App","filter","newToDo","uuid","v4","exact","path","render","component","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.b21a64bd.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\n//proptypes are sort of validation for properties that a component\r\n//should have to set the type, if it's required or not...etc.\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class ToDoItem extends Component {\r\n\r\n    //a style function for the div element (line 22)\r\n    getStyle = () => {\r\n        return {\r\n            background: '#f4f4f4',\r\n            padding: '10px',\r\n            borderBottom: '1px solid #ccc',\r\n            //an if-else statement if the todo item is completed or not (ternary operator)\r\n            textDecoration: this.props.todo.completed ? 'line-through' : 'none'\r\n        }\r\n    }\r\n\r\n    render() {\r\n        //destructuring to get the variables from the props\r\n        const { id, title } = this.props.todo;\r\n        return (\r\n            <div style={this.getStyle()}>\r\n                <p>\r\n                    {/* checkbox */}\r\n                    <input type=\"checkbox\"\r\n                           //adding an \"onChange\" event; \"markComplete\" is a method\r\n                           //bind() sets \"this\" value as the item's id\r\n                           onChange={this.props.markComplete.bind(this, id)} \r\n                           /> \r\n                    {/* todo item */}\r\n                    {title}\r\n                    {/* delete button */}\r\n                    <button onClick={this.props.deleteTodo.bind(this, id)} \r\n                             style={btnStyle}>x</button>\r\n                </p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nToDoItem.propTypes = {\r\n    todo: PropTypes.object.isRequired\r\n}\r\n\r\n// delete button style\r\nconst btnStyle = {\r\n    background: '#ff0000',\r\n    color: '#ffffff',\r\n    border: 'none',\r\n    padding: '5px 9px',\r\n    borderRadius: '50%',\r\n    cursor: 'pointer',\r\n    float: 'right'\r\n}\r\n\r\nexport default ToDoItem;\r\n","import React, { Component } from 'react'\r\n\r\n//proptypes are sort of validation for properties that a component\r\n//should have to set the type, if it's required or not...etc.\r\nimport PropTypes from 'prop-types';\r\nimport ToDoItem from './ToDoItem';\r\n\r\nclass Todos extends Component {\r\n  render(){\r\n    //map() --> is a high order array method; it can return an array from an array\r\n    //looping through the todolist and then outputting JSX\r\n    return this.props.todos.map((todo) => (\r\n      <ToDoItem key={todo.id} //every list has a key that uses a unique id\r\n                todo={todo} //todo is a prop and is being passed to the ToDoItem component\r\n                markComplete={this.props.markComplete}\r\n                deleteTodo={this.props.deleteTodo} \r\n                />\r\n    ));\r\n  }\r\n}\r\n\r\nTodos.propTypes = {\r\n  todos: PropTypes.array.isRequired\r\n}\r\n\r\nexport default Todos; \r\n\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function Header() {\r\n    return (\r\n        <header style={headerStyle}>\r\n            <h1>TodoList</h1>\r\n            <Link className=\"nav-link\" to=\"/\">Home</Link> |\r\n            <Link className=\"nav-link\" to=\"/about\">About</Link>\r\n        </header>\r\n    )\r\n}\r\n\r\nconst headerStyle = {\r\n    background: '#333333',\r\n    color: '#ffffff',\r\n    textAlign: 'center',\r\n    padding: '10px'\r\n}","import React, { Component } from 'react'\r\n\r\nexport class AddToDo extends Component {\r\n    // default variable and value for the text field\r\n    state = {\r\n        title: ''\r\n    }\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        // this.props.addToDo(this.state.title);\r\n        this.props.addToDo(this.state.title);\r\n        this.setState({ title: ''})\r\n    }\r\n\r\n    onChange = (e) => this.setState({\r\n        [e.target.name]: e.target.value\r\n    });\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.onSubmit} className=\"textForm\" style={{display:'flex'}}>\r\n                {/* text input */}\r\n                <input type=\"text\" \r\n                       name=\"title\" \r\n                       placeholder=\"Add to do...\" \r\n                       className=\"addTextField\"\r\n                       value={this.state.title}\r\n                       onChange={this.onChange}\r\n                       />\r\n                {/* submit button */}\r\n                <input type=\"submit\" \r\n                       value=\"Submit\" \r\n                       className=\"btn\" \r\n                    />\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddToDo\r\n","import React from 'react'\r\n\r\nexport default function About() {\r\n    return (\r\n        <React.Fragment>\r\n            <h1>About</h1>\r\n            <p>This is the TodoList app v1.0.0\r\n                It is part of a React crash course.\r\n            </p>\r\n        </React.Fragment>\r\n    )\r\n}\r\n","import React, {Component} from 'react';\nimport {BrowserRouter as Router, Route } from 'react-router-dom'\nimport Todos from './components/Todos';\nimport './App.css';\nimport Header from './components/layout/Header';\nimport AddToDo from './components/AddToDo';\nimport About from './components/pages/About';\nimport uuid from 'uuid';\n\nclass App extends Component {\n  //default values/data of the todo list\n  state = { //javascript object\n            todos: [\n              {\n                id: 1,\n                title: 'Take out the trash',\n                completed: false\n              },\n              {\n                id: 2,\n                title: 'Practice React js',\n                completed: false\n              }\n            ]\n          }\n\n  //Toggle Complete\n  markComplete = (id) => {\n    this.setState({\n      todos: this.state.todos.map (todo => {\n        if(todo.id === id){\n          todo.completed = !todo.completed\n        }\n        return todo;\n      })\n    });\n  }\n  \n  //deletes the item\n  deleteTodo = (id) => {\n    //filter() returns another array \n    this.setState({ todos: [...this.state.todos.filter(todo => todo.id !== id)]})\n  }\n\n  //add list item\n  addToDo = (title) => {\n    const newToDo = {\n      id: uuid.v4(),\n      title,\n      completed: false\n    }\n\n    this.setState({\n      todos: [...this.state.todos, newToDo]\n    })\n  }\n//Note: render() is the lifecycle method. It is required because\n//      it renders the component in the browser and that's called JSX (JavaScript XML)\n  render(){\n    return (\n      <Router>\n        <div className=\"App\">\n          <div className=\"container\">\n            <Header/>\n            <Route exact path=\"/\" render={ props=> (\n              <React.Fragment>\n                <Todos todos={this.state.todos} \n                  markComplete={this.markComplete} //calling markComplete function\n                  deleteTodo={this.deleteTodo} //calling deleteToDo function\n                  /> \n                <AddToDo addToDo={this.addToDo}/>\n              </React.Fragment>\n            )} /> \n            <Route path=\"/about\" component={About} />\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n\n// Note: different components can have their own 'state'\n\n/**\n * Note: Difference between map() and filter()\n * \n * map()  -> creates a new array with the results of calling a function\n *            for every array elements.\n *        -> it allows the items in an array to be manipulated to the user's\n *            preferences, returning the conclusion of the chosen manipulation\n *            in an entirely new array.\n * \n * filter() -> creates an array filled with all array elements that pass\n *              a test implemented by the provided function.\n *           -> identifying certain items in an array that share a common \n *              characteristics\n * \n * SOURCE: https://medium.com/@c.mansour/the-difference-between-the-filter-and-map-array-methods-in-javascript-f8164f65fa5e\n */","//Note: this file is the entry point to react\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App'; //importing the main app component\n\n// Note: line 7 renders the App components to the \"root\" div\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}